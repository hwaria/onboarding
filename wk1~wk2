Week1 ~ Week2 배운 내용
1.	Java
-	변수와 상수의 개념
-	자료형: 원시 자료형(Boolean, char, int..), 비원시 자료형(String, array)..
-	연산자
-	조건문 & 반복문
실습) 이중 for문 사용해서 삼각형을 출력하는 프로그램 작성해보기 
public class Main {
	final static int N = 30;
	
	public static void main(String[] args) {
		//for문 : 초기화 부분, 조건 부분, 연산 부분
		for (int i = N; i > 0; i--) {
			for (int j = i; j > 0; j--) {
				System.out.print("*"); // 처음 별을 삼십개 연달아 출력
			}
			System.out.println(); //위쪽 반복이 끝날 때 마다 줄바꿈		
			
		}
	}
}

결과
******************************
*****************************
****************************
***************************
**************************
*************************
************************
***********************
**********************
*********************
********************
*******************
******************
*****************
****************
***************
**************
*************
************
***********
**********
*********
********
*******
******
*****
****
***
**
*

- 기본입출력: scanner 클래스 이용하여 데이터 입력받고 출력하기 
실습) 파일에 입력된 정수에 100을 곱해 출력하는 프로그램 작성해보기

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class main {

	public static void main(String[] args) {
		File file = new File("input.txt"); 
		// 텍스트파일을 불러와서 file 변수에 저장
		try {
			Scanner sc = new Scanner(file); 
			// 입력받는 변수는 file을 통해서 받음 
			while (sc.hasNextInt()) { 
				// sc가 읽어오고 있는 파일에서 다음의 정수가 있나?
				System.out.println(sc.nextInt() * 100); 
				// 정수가 있다면 코드 실행
			}
			sc.close();
		} catch (FileNotFoundException e) { 
			//surround with try catch. 예외 경우 실행될 코드
			System.out.println("파일을 읽어오는 도중에 오류가 발생했습니다.");
		}	
	}
}
	파일에 입력되어있는 정수에 각각 100씩 곱한 결과 출력

-	사용자 정의 함수: 특정 기능을 수행하는 모듈을 직접 정의하여 활용
실습) Max()를 이용하여 최대값을 저장하는 프로그램 작성해보기
public class main {
	public static int max(int a, int b) {
		return ( a > b) ? a:b; // 삼항연산자 
	}
	
	public static int function(int a, int b, int c) { 
				//총 세개의 변수 중에 최대값 찾기
		int result = max(a, b); // a,b 비교
		result = max(result, c); // 위에서 나온 값과 c를 다시 비교
		return result; // 그 결과를 리턴
	}
			
	public static void main(String[] args) { 
		System.out.println("(345, 567, 789) 중에서 가장 큰 값은" + 								function(345, 567, 789));
	}
}

-	배열: 정수형 배열 int [] array(배열의 이름) = new int[정수의 개수];
실습) 사용자가 원하는 개수만큼의 배열을 생성하고 최댓값 구하는 프로그램 작성해보기
public class Main {

public static int max(int a, int b) {
	return (a > b) ? a : b;
}
public static void main(String[] args) {	
	Scanner scanner = new Scanner(System.in);
	System.out.print("생성할 배열의 크기를 입력하세요 : ");
	int number = scanner.nextInt();
	int [] array = new int[number];
for (int i = 0; i < number; i++) {
	System.out.print("배열에 입력할 정수를 하나씩 입력하세요(양수):" );
	array[i] = scanner.nextInt();
}
int result = -1; // 모든 값은 -1보다 큼
for(int i = 0; i < number; i++) {
	result = max(result, array[i]); 
}

System.out.println("입력한 모든 정수 중에서 가장 큰 값은: " + result);
}
}

-	 Collections framework: 
	Set [HashSet, LinkedHashSet, TreeSet] : 중복되지 않는 값들을 담을 때 
	List [ArrayList, Vector, LinkedList] : 중복을 허용
	Queue Map : key-value 형식으로 값들을 담을 때

1)	ArrayList- Array 사용할 경우 한번 정해진 배열의 크기를 변경할 수 없었음. 
Import java.util.ArrayList;

ArrayList al = new ArrayList(); // array 생성 방법
	al.add(“one”); // 데이터 추가 방법
	al.add(“two”);
	al.add(“three”);
for (int i= 0; I < al.size(); i++) // 데이터 내용 열거 방법
{
	String value = (String) al.get(i); 
	//   get을 통해 i를 받을 때 이것은 object 타입으로 저장되어 있으므로, 
	이것을 String 타입의 value 변수에 담기 위해서는 string으로 형 변환을 해주어야 함  
	System.out.prinln(value);
}

*주의할 점: ArrayList의 데이터 형식을 특정 데이터 형식으로 리턴해주기 위해서는 먼저 형변환을 해줘야함. 따라서 최근에는 하기와 같이 제네릭을 사용 
ArrayList<String> al = new ArrayList<String>() 을 해줄 경우 입력되는 데이터 타입을 명시했기때문에 get을 통해 데이터를 가져올 때 string 타입으로 가져 옴 

2)	SET
Set-HashSet의 예

Import java.util.HashSet; 

Public class SetDemo {
	Public static void main(String [] args) {
		HashSet<Integer> A = new HashSet<Integer>();
		A.add(1); // A 의 HaseSet에는 1, 2, 3이 담김
		A.add(2);
		A.add(2); // 이렇게 값이 중복되어도 중복된 값이 제외되고 출력됨 
		A.add(3);

		Iterator hi = (Iterator) A.iterator(); //위 코드를 출력해줌
		While (hi.hasNext()) { 
		// hasNext: 반복할 데이터가 더 있으면 true, 
			더 이상 반복할 데이터가 없다면 false를 리턴
			System.out.println(hi.next());
		//next: hasNext가 true라는 것은 next가 리턴할 데이터가 존재한다는 의미
}

		HashSet<Integer> B = new HashSet<Integer>();
		B.add(3);
		B.add(4);
		B.add(5);


}
}
**List는 입력된 모든 값이 저장되고, set은 입력된 값 중 고유한 값만 저장됨 

3)	Map: key값은 중복될 수 없고, value값은 중복 허용: 중복된 key값을 줄 경우 기존에 key와 연결되어있던 value값은 새로 들어온 value값으로 대체됨
실습)
public class Main {
	
	public static void main(String[] args) {
		Map<Integer, String> a = new HashMap<>();	
		a.put(1, "문승진");
		a.put(22, "이창준");
		a.put(33, "변자룡");
		a.put(44, "이정화");
		a.put(100, "김진석");
		
		Iterator it = sortbyvalue(a).iterator();
		 
		while (it.hasNext()) {
			Integer temp = (Integer) it.next();
			System.out.println(temp + " : " + a.get(temp));
		}
	}

	public static List<Integer> sortbyvalue(final Map<Integer, String> a) {
	
		List<Integer> ranksName = new ArrayList();
		ranksName.addAll(a.keySet());
	
		Collections.sort(ranksName, new Comparator<Object>() {
		public int compare(Object o1, Object o2) {
			Object v1 = a.get(o1);
			Object v2 = a.get(o2);
			
			return ((Comparable) v1).compareTo(v2);
		}
	});
	return ranksName;
	}}
결과
100 : 김진석
1 : 문승진
33 : 변자룡
44 : 이정화
22 : 이창준

-	클래스: 인스턴스화- 실제로 어떠한 데이터를 변수처럼 만들어서 사용 가능하게 하는 것.
실습)
국영수 점수를 받아 총점과 평균을 출력해주는 프로그램 작성
Main.java
public class Main {

	public static void main(String[] args) {
		Score a = new Score(88, 33, 23);
		Score b = new Score(48, 53, 93);
		
		System.out.println("학생 a의 국영수 총점은: " + a.sum() + ", 평균은: " + a.avg());
		System.out.println("학생 b의 국영수 총점은: " + b.sum() + ", 평균은: " + b.avg());
	}

}

Score.java

public class Score {
	int korean;
	int english;
	int math;
	
	public int getKorean() {
		return korean;
	}
	
	public int getEnglish() {
		return english;
	}
	
	public int getMath() {
		return math;
	}
	
	public void setKorean(int korean) {
		this.korean = korean;
	}
	
	public void setEnglish(int english) {
		this.english = english;
	}
	
	public void setMath(int math) {
		this.math = math;
	}
	
	public Score(int korean, int english, int math) {
		this.korean = korean;
		this.english = english;
		this.math = math;
	}
	
	public int sum() {
		return this.korean + this.english + this.math;
	}
	
	public int avg() {
		return (this.korean + this.english + this.math) / 3;
	}
	public String toString() {
		return "국어: " + this.korean + ", 영어: " + this.english + ", 수학: " + 				this.math + " 총 점 : " + this.sum();
	}}

-	파일 입출력: Object InputStream/ ObjectOutputStream: 객체 스트림
실습) Score class를 이용해서 객체를 만든 후 파일에 입력하여 출력, 파일을 읽어들어 콘솔창에 출력 / 클래스에 public class Score implements Serializable {

package file;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStreamWriter;

public class FileInputOutput {

	public static void main(String[] args) throws IOException {
		FileOutputStream file = new FileOutputStream("D://abc/paxnet.txt");
			
		Score lia = new Score();
		lia.setEnglish(53);
		lia.setKorean(75);
		lia.setMath(34);
			
		ObjectOutputStream oos = new ObjectOutputStream(file);
		oos.writeObject(lia); //객체를 스트림에 씀
		oos.flush(); // 스트림에 데이터를 내보냄 
		
		FileInputStream readScore = new FileInputStream("D://abc/paxnet.txt");
		ObjectInputStream objectRead = new ObjectInputStream(readScore); 			//바이트 형태의 객체를 복구
		InputStreamReader inputStreamReader = new InputStreamReader(objectRead, "MS949");
				
		try {
			Score liaScore = (Score) objectRead.readObject(); // 				오브젝트를 읽을 때는 정확한 형변환을 해줘야 함
			System.out.println(liaScore); 
			-> 국어: 75, 영어: 53, 수학: 34 총 점 : 162

		} catch (ClassNotFoundException e) {
			
		}
		
		readScore.close();	
	}
}



2.	SQL
-	데이터베이스: 데이터의 집합. 일반적으로 통용되는 개념으로는 특정 데이터를 확인하고 싶을 때 간단하게 찾아낼 수 있도록 정리된 형태.
-	SELECT * FROM 테이블명;
-	테이블 구조 참조: DESC 테이블명. 
Filed: 열 이름, Type: 해당 열의 ‘자료형’, Null: Null 값을 허용 여부, Key: 해당 열이 ‘키’로 지정되어 있는지 여부, Default: 그 열에 주어진 ‘기본값’. 즉 생략했을 경우 적용되는 값
-	자료형의 종류: integer, char(고정 길이 문자열), varchar(변동 길이), DATE, TIME
-	검색 조건 지정하기 
1)	열 지정: SELECT 열1, 열 2.. FROM 테이블명
2)	WHERE 조건식: SELECT * FROM SAMPLE21 WHERE NO = 2;
3)	Null값 검색: SELECT * FROM SAMPLE21 WHERE BIRTHDAY IS NULL / IT NOT NULLL;
4)	조건 조합
	Select * from sample24 where a <> 0 and b <> 0;
	Select * from sampe24 where not (a<>0 or b<>0);
5)	패턴 매칭에 의한 검색
	테이블 sample21 에서 name이 '박'으로 시작하는 행(레코드) 조회 (성이 '박'씨 인 사람 조회) 
select * from sample21 where name like '박%';
	테이블 sample21 에서 name에 '재'가 들어 가는 행(레코드) 조회 (이름에 '재' 가 들어가는 사람 조회) 
select * from sample21 where name like '%재%';
	테이블 sample25 에서 text컬럼에 %를 포함한 행(레코드) 조회 
select * from sample25 where text like '%\%%';
-	정렬: ORDER BY 정렬기준. ORDER BY 정렬기준 (DESC 내림차) 
*MYSQL에서 NULL값은 가장 작은 값으로 취급하므로 오름차순에서는 NULL값이 먼저, 내림차순에서는 가장 나중에 표시 
-	결과 행 제한하기 
	테이블 sample33의 no 컬럼 값을 기준으로 상위 5건만 조회 
select * from sample33 order by no limit 5;
	sample33의 데이터를 내림차순으로 한 페이지에 3건씩 출력하려고 한다. 각 페이지에 대한 쿼리
 1페이지 select * from sample33 order by no desc limit 3 offset 0;
 2페이지 select * from sample33 order by no desc limit 3 offset 3;
 3페이지 select * from sample33 order by no desc limit 3 offset 6;
	limit 함수는 표준sql 이 아니라 oracle 에서는 사용 못함. oracle에서는? select * from sample33 order by no where rownum <= 5 ;
-	수치, 문자열, 날짜 연산 
1)	수치 SELECT *, PRICE * QUANTITY FROM SAMPLE34;
*NULL로 연산할 경우 결과는 NULL
2)	문자열: 
	결합 SELECT CONCAT(QUANTITY, UNIT) FROM SAMPLE35;
오라클에서는 select quantity|| unit from sample35;
	SUBSTRING select '20190603'에서 년도(YYYY), 월 (MM) ,일 (DD) 나누어 출력 
select substring('20190604', 1,4) as yyyy, substring('20190604', 5, 2) as mm, substring('20190604', 7, 2) as dd FROM DUAL;
3)	날짜연산 '20190604' 와 '20190503' 가 몇 일이 차이가 나는지 출력
SELECT DATEDIFF('2019-06-04', '2019-05-03');
-	데이터 INSERT, DELETE, UPDATE
INSERT INTO SAMPLE41 VALUES (1, ‘ABC’, ‘2014-02-20’);
DELETE FROM SAMPE41 WHERE NO = 3;
UPDATE SAMPE41 SET 열 이름 b = ‘2014-08-04’ where no = 2;
-	집계함수/그룹함수 
	sample51 테이블에서 name이 같은 로우끼리 그룹을 만들고 그룹별 quantity의 합 출력
	select name, sum(quantity) from sample51 group by name;
	sample51 테이블에서 name이 같은 로우끼리 그룹을 만들고 그룹별 행(레코드) 수가 2 이상인 행만 출력
select name, count(*) from sample51 group by name having count(name) >=2;

-	서브쿼리: SQL문안에 또 하나의 SQL문을 넣는 것. 
	sample34 에서 price 가장 낮은 행(레코드) 의  no, price, quantity 컬럼 출력
select no, price, quantity from sample34 where price = (select min(price) from sample34);

-	테이블 작성, 삭제(DROP)
	TABLE명: DEVELOPER_NAME 
	FIELD	TYPE		NULL	KEY
	no	int(11)	 	NO	PK			
	name	varchar(20)	YES			

	create table DEVELOPER_NAME (
		no integer(11) not null, 
		name varchar(20), 
		primary key(no)
	);

-	테이블 결합 
1)	내부결합: FROM구에서 테이블을 복수 지정하여 테이블을 결합. 곱집합에서 ON 결합조건 지정
	DEVELOPER_NAME , DEVELOPER_POSITION 2개 테이블을 이용해 NO, NAME , POSITION 출력
SELECT DEVELOPER_NAME.NO, DEVELOPER_NAME.NAME, DEVELOPER_POSITION.POSITION
FROM DEVELOPER_NAME INNER JOIN DEVELOPER_POSITION
ON DEVELOPER_NAME.NO = DEVELOPER_POSITION.NO;

2)	외부결합: 한 쪽에만 존재하는 데이터행이 있을 때 그 행을 가진 테이블을 기준으로 테이블을 결합
	DEVELOPER_NAME , DEVELOPER_ADDRESS 2개 테이블을 이용해 NO, NAME , ADDRESS 출력 (4명 전체 나오도록)  
select DEVELOPER_NAME.NO, DEVELOPER_NAME.NAME, DEVELOPER_ADDRESS.ADDRESS 
from DEVELOPER_NAME LEFT JOIN DEVELOPER_ADDRESS 	
on DEVELOPER_NAME.NO = DEVELOPER_ADDRESS.NO;

-	기존 내용 종합하여 활용 실습 
	2019년도에 작성한 리스트 출력
SELECT BW.WRT_SEQ, BW.TITLE, BW.BBS_ID, BW.REGMN_ID, BWC.CNTN, BWRI.RECM_NUM, BWRI.HITS_NUM, BWRI.COMT_NUM
FROM TBC1_BBS_WRT BW LEFT JOIN TBC1_BBS_WRT_CNTN BWC ON (BW.WRT_SEQ = BWC.WRT_SEQ)
LEFT JOIN TBC1_BBS_WRT_RECENT_INFO BWRI ON (BW.WRT_SEQ = BWRI.WRT_SEQ) 
where (SUBSTRING(BW.REG_DATE, 1, 4) =2019) ;

	제목이 '짝짝짝' 인 글의 이전 글 조회 (WRT_SEQ기준)
SELECT * FROM TBC1_BBS_WRT BW WHERE WRT_SEQ = (SELECT MAX(WRT_SEQ) 
FROM MULTIPLE WHERE WRT_SEQ < (SELECT WRT_SEQ FROM MULTIPLE WHERE CNTN = '짝짝짝.'));

	BBS_NAME이 '코스닥시황' 인 데이터의 RECM_NUM,HITS_NUM,COMT_NUM 값을 0으로 초기화
update TBC1_BBS_WRT_RECENT_INFO set RECM_NUM = 0 ,HITS_NUM = 0, COMT_NUM = 0 
where wrt_seq = (select wrt_seq from TBC1_BBS_WRT 
where bbs_id = (SELECT bbs_id FROM TBC1_BBS WHERE BBS_NAME = '코스닥시황'));
