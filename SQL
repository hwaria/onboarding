SQL 첫 걸음 – 아사이 아츠시

1강. 데이터베이스 
-	데이터: 컴퓨터 안에 기록되어 있는 숫자
-	데이터베이스: 데이터의 집합. 일반적으로 통용되는 개념으로는 특정 데이터를 확인하고 싶을 때 간단하게 찾아낼 수 있도록 정리된 형태. 데이터베이스의 데이터는 하드디스크나 플래시메모리(SSD) 등 비휘발성 저장장치에 저장

1.	시스템 내의 데이터베이스
-	데이터센터의 서버에서 주로 운용했으나 최근에는 개인용 컴퓨터, 휴대용 기기에 내장되기도. 
-	웹 시스템을 통해 데이터센터의 데이터베이스에 접근 가능
2.	DB와 DBMS
-	DBMS: 데이터베이스 관리 시스템, DBMS를 통해 생산성, 기능성, 신뢰성 도모
1)	생산성: 시스템 구축 시 기본 기능은 빼고 개발한 후, 데이터 검색, 추가, 삭제, 갱신과 같은 기본기능은 DBMS를 통해 실현
2)	기능성: 데이터베이스를 다루는 다양한 기능을 제공 – 복수 유저의 요청에 대응, 대용량의 데이터 저장 및 검색 기능 -> 유연한 시스템 개발 가능
3)	신뢰성: 많은 요청에 대응할 수 있도록 여러 대의 하드웨어를 구성하여 신뢰성 및 성능 향상이 가능 (확장성과 부하 분산 구현 = 클러스터 구성, 스케일 아웃), 데이터 import, export 통해 간단히 백업 가능
3.	데이터베이스를 조작하는 언어 SQL
-	DBMS와의 대화에 필요한 SQL 언어. 
-	여러 가지의 데이터베이스 중 관계형 데이터베이스 관리 시스템 조작에 사용
-	SQL 명령의 종류
1)	DML(Data Manipulation Language): 새롭게 데이터를 추가, 삭제, 내용 갱신 등 데이터를 조작할 때 사용
2)	DDL(Data Definition Language): 데이터를 정의하는 명령어. ‘데이터 베이스 객체’라는 데이터 그릇을 이용하여 데이터 관리를 하는 데, 이 같은 객체를 만들거나 삭제하는 명령
3)	DCL(Data Control Language): 데이터를 제어하는 명령어. 트랜젝션과 데이터 접근권한을 제어하는 명령

2강. 다양한 데이터베이스
-	관계형데이터베이스(RDB): SQL로 데이터를 다루는 데이터베이스
1.	데이터베이스 종류
-	계층형 데이터베이스: 
-	관계형 데이터베이스: 행과 열을 가지는 표 형식 데이터를 저장, 이것만 SQL 사용
-	객체지향 데이터베이스: RDBMS에서 확장기능으로서 사용되기도 함 
-	XML 데이터베이스: XML은 태그를 이용해 마크업 문서를 작성. 태그는 <data>데이터</data> 형식으로 표현. XML 형식으로 기록된 데이터 저장. XML 데이터베이스에서는 SQL 명령을 사용할 수 없으므로 XQuery라는 전용 명령어 사용. RDBMS에서 확장기능으로서 사용되기도 함
-	키-밸류 스토어(KVS): 키와 그에 대응하는 값이라는 단순한 형태의 데이터 저장

3강. 데이터베이스 서버
-	RDBS는 복수의 클라이언트가 보내오는 요청에 응답할 수 있도록 클라이언트/서버 모델로 동작
1.	클라이언트/서버 모델
-	RDMS에서의 클라이언트/서버 작동: 접근을 위한 사용자 인증 -> RDBMS에 접속하여 SQL명령을 서버로 보냄 -> 서버 응답 -> 사용이 끝나면 클라이언트 종료하여 데이터베이스 접속 끊음
2.	웹 애플리케이션의 구조
-	웹 애플리케이션은 웹 서버와 데이터베이스 서버의 조합으로 구축됨.
-	웹 서버에서 동적으로 html을 생성하려면 웹 서버에서 CGI라고 불리는 동적 콘텐츠를 제어하는 프로그램을 이용하여 프로그램과 웹 서버 간 연동, 통신하여 처리.
-	CGI가 데이터베이스의 클라이언트가 됨: SQL명령 전달하고 실행결과를 DB에서 응답받음
4강. Hello World 실행하기
1 & 2. SELECT 명령 구문
-	SELECT * FROM 테이블명;
엔터키 누르면 입력한 sql 명령이 서버에 전달되며 서버는 이를 실행한 후 결과 변환 
-	Select 명령은 ‘질의’, ‘쿼리’라 불리기도 함
-	* 는 모든 열을 의미하는 메타문자
3.	예약어와 데이터베이스 객체명 
-	SELECT * FROM 테이블명; 에서 SELECT, *, FROM은 예약어
-	데이터베이스에는 테이블 외에도 다양한 데이터 저장, 관리 가능 => 데이터베이스 객체(테이블, 뷰 등) – 이름을 붙여 저장한 데이터들의 집합
-	대소문자 구별: 안 함 
4.	Hello World를 실행한 결과 = 테이블
-	열과 행으로 구성된 표 형식의 데이터; 열마다 이름이 지정되어 있음. 행과 열이 만나는 부분은 ‘셀’
-	수치형은 오른쪽 정렬, 문자형, 날짜시간형은 왼쪽 정렬  
-	열은 하나의 자료형만 가질 수 있으며 수치형의 열에 문자형의 데이터를 저장할 수 없다
5.	값이 없는 데이터 = NULL
-	Null 아무것도 저장되어 있지 않은 상태

5강. 테이블 구조 참조하기
1.	DESC 명령
-	특정 열의 값을 참조하기 위해 DESC 명령으로 테이블 구조를 참조하여 테이블에 어떤 열이 있는지 알아보기
-	DESC 테이블명; 했을 시 각 콜럼
	Filed: 열 이름 
	Type: 해당 열의 ‘자료형’, int 정수, varchar 가변 길이 문자열, date, char 고정 길이 문자열
	Null: Null 은 Null 값을 허용할 것인지 아닌지를 나타내는 제약사항. Yes이면 허용
	Key: 해당 열이 ‘키’로 지정되어 있는지 여부
	Default: 그 열에 주어진 ‘기본값’. 즉 생략했을 경우 적용되는 값
2.	(자주 쓰이는) 자료형의 종류
-	integer 정수값. 소수점 포함 불가
-	char 고정 길이 문자열. 열의 최대 길이를 지정하여 언제나 고정된 길이로 데이터가 저장. 최대 길이보다 작은 문자열을 저장할 경우 공백으로 채움
-	varchar 변동 길이 문자열. 저장할 문자열의 길이에 맞춰 저장공간을 가변적으로 사용. 
-	Date 날짜값 저장
-	Time형 시간을 저장할 수 있는 자료형





6강. 검색 조건 지정하기
-	행(where)이나 열(select)을 선택하여 데이터를 읽어오기
1.	Select 구에서 열 지정하기
-	SELECT 열1, 열2(열 이름) FROM 테이블명;
2.	WHERE 구에서 행 지정하기
-	SELECT 열 FROM 테이블명 WHERE 조건식;
-	SELECT * FROM SAMPLE21 WHERE NO = 2;
샘플 21의 전체 테이블 중 NO 값이 2인 행만 추출 
-	연산자 = 외에도 사용 가능: ‘<>’ ~가 아님
3.	문자열형의 상수
-	문자열형, 날짜시간형을 비교할때는 싱글쿼트(‘ ’)로 둘러싸 표기, 연월일은 하이픈으로 구분. 시각은 시분초를 콜론으로 구분
-	자료형에 맞게 표기한 상수값을 ‘리터럴’이라고 부름
4.	NULL 값 검색
-	IS NULL
-	SELECT * FROM sample21 WHERE birthday IS NULL;
Birthday값이 NULL인 경우 참을 반환
-	SELECT * FROM SAMPLE21 WHERE BIRTHDAY IS NOT NULL;
-	Birthday값이 NULL이 아닌 경우 참을 반환
5.	비교 연산자
-	=
-	<>
-	>, >=
-	<, <=

7강. 조건 조합하기
1.	And로 조합하기
-	A 열과 b 열이 모두 0이 아닌 값 검색하기
Select * from sample24 where a <> 0 and b <> 0;
2.	Or로 조합하기
-	A 열이 0이 아니거나 b 열이 0이 아닌행 검색
Select * from sample24 where a <> 0 or b <> 0;
-	And와 or을 조합하여 사용할 때는  or 조건식을 괄호로 묶어 지정하기: and는 or에 비해 우선순위가 높다
Select * from sample24 where (a=1 or a=2) and (b=1 or b=2);
3.	Not 조건문
Select * from sampe24 where not (a<>0 or b<>0);

8강. 패턴 매칭에 의한 검색
-	‘like’ 술어를 사용해서 문자열의 일부분을 비교하는 ‘부분 검색’
-	%는 임의의 문자열
-	_는 임의의 문자 하나: 
-	전방 일치 ‘검색어%’, 중간 일치 ‘%검색어%’, 후방 일치 ‘%검색어’
-	이스케이프( \ ): %나 _를 포함한 문자열 검색할 때
SELECT * FROM SAMPLE25 WHERE TEXT LIKE ‘%\%%’;
‘를 포함한 문자열검색할 때는 ‘를 두 개 연속 기술
