1. set 과 List의 차이? (중복, 순서보장 에 대한 내용이 들어갈것)
list는 입력되는 모든 값을 저장할 수 있는 반면에 set은 중복되지 않는 고유한 값들을 담을 때 사용하며, 
set을 통해 데이터가 순차적으로 들어가지 않으므로 인덱스를 사용하여 데이터에 접근할 수 없다.

2. list 와 arrayList의 차이, map 이랑 Hashmap 의 차이?
List는 인터페이스이고 arrayList는 List에 속해있는 클래스로 list 인터페이스를 구현하고 있음 
Map은 컬렉션즈 프레임워크 안에 있는 최상위 카테고리 중 하나. 

3. 1~100까지를 컬렉션을 이용하여 출력하시오
public class Main {
	
	public static void main(String[] args) {
		ArrayList <Integer> a = new ArrayList();
		
		for (int i = 1; i<=100; i++) {
			a.add(i);
		}
		
		for (int number : a ) {
			System.out.println(number);
		}
	}
}

4. 우리 팀원들 이름에 각각 인덱스(숫자 1,22,33,44 ...) 를 부여하고 순서대로 정렬하여 출력해보시오.
4.1 treeMap 사용
public class Main {
	
	public static void main(String[] args) {
		HashMap<Integer, String> a = new HashMap<Integer, String>();
		
		a.put(1, "문승진");
		a.put(22, "이창준");
		a.put(33, "변자룡");
		a.put(44, "이정화");
		
		TreeMap<Integer, String> aa = new TreeMap<Integer, String> (a);
		Set<Integer> keyset = a.keySet();
		Iterator <Integer> keyiterator = aa.keySet().iterator();
		
		Integer k;
		String v;
		
		while(keyiterator.hasNext()) {
			k = (Integer)keyiterator.next();
			v = (String)a.get(k);
			System.out.println(k + " : " + v);
		}
	}
	
}

4.2 comparable
public class Main {
	static Map<Integer, String> a = new HashMap<>();
	
	public static void sortbykey() {
		ArrayList<Integer> ranks = new ArrayList<Integer> (a.keySet());
		
		Collections.sort(ranks);  //역순은 reverse()
		
		for (Integer i : ranks) {
			System.out.println( i + " : " + a.get(i));
		}
	}
	
	public static void main(String[] args) {
		
		
		a.put(1, "문승진");
		a.put(22, "이창준");
		a.put(33, "변자룡");
		a.put(44, "이정화");
		
		sortbykey();
	}
}

5. 4번 문제에서 3번째에 해당하는 사람의 이름은 무엇인지 출력해 보시오.
6. 4번 문제에서 숫자 역순으로(내림차순) 정렬해서 출력해보시오
7. 4번 문제에서 숫자가 아니라 이름순으로 정렬해보시오. (가나다 순)

8. 4번 문제에서 이름 역순으로(내림차순) 정렬해보시오. (가나다 역순)
package homework;

import java.util.*;

public class Collection_sortByValues {

	public static void main(String[] args) {
			
			Map <Integer, String> team = new HashMap<>();
			
			team.put(37, "문승");
			team.put(31, "이창");
			team.put(32, "변자");
			team.put(88, "이정");
			team.put(99, "김진");
				
			Iterator<Integer> it = Collection_sortByValues.sortbyValue(team).iterator();
			while (it.hasNext()) {
				int temp = (Integer) it.next();
				System.out.println(temp + " : " + team.get(temp));
				
			}
	}
	public static List<Integer> sortbyValue(final Map<Integer, String> map) {
		List<Integer> ranks = new ArrayList<Integer>(map.keySet());
				
		Collections.sort(ranks, new Comparator<Object>() {
			public int compare(Object o1, Object o2) {
				Object v1 = map.get(o1);
				Object v2 = map.get(o2);
				return ((Comparable<Object>)v1).compareTo(v2);
			}
			
		});
		Collections.reverse(ranks);
		return ranks;
	}
}
